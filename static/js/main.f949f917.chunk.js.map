{"version":3,"sources":["features/visualizer/charts/DoughnutChart.js","features/visualizer/utils.js","features/visualizer/Profile.js","features/visualizer/Repositories.js","features/visualizer/ProfileAndRepos.js","features/visualizer/visualizerSlice.js","features/visualizer/Visualizer.js","App.js","app/store.js","serviceWorker.js","index.js","features/visualizer/Visualizer.module.css"],"names":["data","title","getRandomColor","Math","floor","random","toString","ProfileDetails","joinedDate","Date","parse","created_at","ListGroup","variant","Item","toDateString","public_repos","public_gists","followers","languages","totalStars","forEach","eachRepo","stargazers_count","language","hasOwnProperty","others","null","chartData","labels","datasets","backgroundColor","hoverBackgroundColor","Object","entries","key","value","push","parsedRepoData","parseRepoData","repoData","Row","Col","sm","Image","src","avatar_url","roundedCircle","fluid","className","login","DoughnutChart","dateParser","str","Table","striped","bordered","hover","size","map","item","idx","forks_count","open_issues_count","substring","updated_at","name","homepage","target","href","html_url","description","repos","useSelector","state","visualizer","repo","profile","Fragment","Profile","Array","isArray","length","Repositories","counterSlice","createSlice","initialState","loading","username","reducers","toggleLoading","clearValues","setusername","action","payload","setrepo","setprofile","actions","UsernameForm","props","history","useHistory","dispatch","useDispatch","useState","match","params","setUsername","useEffect","buttonContent","Button","disabled","Spinner","as","animation","role","aria-hidden","type","onClick","handleSubmit","onSubmit","e","preventDefault","InputGroup","Prepend","Text","FormControl","placeholder","onChange","event","aria-label","Append","repoUrl","profileUrl","requestOne","Axios","get","requestTwo","all","then","spread","responseOne","responseTwo","catch","error","response","status","toast","console","log","finally","content","classes","spinner__container","ProfileAndRepos","Container","heading","configure","autoClose","position","POSITION","TOP_RIGHT","NotFound","Routes","fallback","exact","path","component","Visualizer","to","App","configureStore","reducer","visualizerReducer","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","store","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.f949f917.chunk.js","sourcesContent":["import React from 'react';\nimport {Doughnut} from 'react-chartjs-2';\n\nexport default function({data, title}){\n\n    return (\n      <div>\n        <h3>{title}</h3>\n        <Doughnut data={data} />\n      </div>\n    );\n  \n};","export const getRandomColor = () => `#${Math.floor(Math.random()*16777215).toString(16)}`;\n\n// parse data for creating chart\nexport const parseRepoData = data => {\n    const languages = {}\n    let totalStars = 0\n    data.forEach(eachRepo=>{\n        totalStars+=eachRepo.stargazers_count\n        const language = eachRepo.language\n        if (!(languages.hasOwnProperty(language))){\n            languages[language] = 0\n        }\n        languages[language]+=1\n    })\n    \n    // to replace null with others from chart\n    if (languages.hasOwnProperty('null')){\n        languages.others = languages.null\n        delete languages.null\n    }\n    const chartData = {\n        labels: [],\n        datasets: [{\n            data: [],\n            backgroundColor: [],\n            hoverBackgroundColor: [],\n        }]\n    }\n    for (const [key, value] of Object.entries(languages)) {\n        chartData.labels.push(key)\n        chartData.datasets[0].data.push(value)\n        chartData.datasets[0].backgroundColor.push(getRandomColor())\n        chartData.datasets[0].hoverBackgroundColor.push(getRandomColor())\n\n      }\n\n    return { parsedRepoData: chartData, totalStars } \n}\n\n","import React from 'react'\nimport { Row, Col, Image, ListGroup } from 'react-bootstrap'\nimport DoughnutChart from './charts/DoughnutChart'\n\nimport { parseRepoData } from './utils'\n\nconst ProfileDetails = ({data}) => {\n    const joinedDate = new Date(Date.parse(data.created_at))\n\n    return (<ListGroup variant=\"flush\">\n                <ListGroup.Item>{`Joined: ${joinedDate.toDateString()}`}</ListGroup.Item>\n                <ListGroup.Item>{`Public repos: ${data.public_repos}`}</ListGroup.Item>\n                <ListGroup.Item>{`Public gists: ${data.public_gists}`}</ListGroup.Item>\n                <ListGroup.Item>{`Followers: ${data.followers}`}</ListGroup.Item>\n            </ListGroup>)\n}\n\nexport default function({data, repoData}){\n\n    const {parsedRepoData, totalStars} = parseRepoData(repoData)\n    return <Row>\n            <Col sm={2}>\n                <Image src={data.avatar_url} roundedCircle fluid />\n                <p className=\"text-center\" >{data.login}</p>\n                <p className=\"text-center\" >{`Total stars: ${totalStars}`}</p>\n            </Col>\n            <Col sm={4} >\n                <ProfileDetails data={data} />\n            </Col>\n            <Col sm={6} >\n                <DoughnutChart data={parsedRepoData} title=\"Projects\" />\n            </Col>\n            <hr></hr>\n    </Row>\n}","import React from 'react'\nimport { Table } from 'react-bootstrap'\n\nfunction dateParser(str){\n    let tmp = new Date(str)\n    return tmp.toDateString()\n}\n\nexport default function ({data}) {\n\n    return <div>\n        <Table striped bordered hover size=\"sm\">\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>Name</th>\n      <th>Description</th>\n      <th>Language</th>\n    </tr>\n  </thead>\n  <tbody>\n      {data.map((item, idx)=>{\n          const title = `\nStars: ${item.stargazers_count}\nForks: ${item.forks_count}\nOpen issues: ${item.open_issues_count}\nCreated: ${dateParser(item.created_at.substring(0,10))}\nLast Update: ${dateParser(item.updated_at.substring(0,10))}\n`\n          return (<tr key={item.name} >\n            <td>{idx+1}</td>\n          <td>{item.homepage?<a target='_blank' href={item.homepage} >{item.name}</a>:item.name}</td>\n          <td><a title={title}  target='_blank' href={item.html_url} > {item.description || `View repository`}</a></td>\n            <td>{item.language}</td>\n        </tr>)\n      })}\n  </tbody>\n</Table>\n    </div>\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Profile from './Profile'\nimport Repositories from './Repositories'\n\nexport default function(){\n\n\tconst repos = useSelector(state=>state.visualizer.repo)\n\tconst profile = useSelector(state=>state.visualizer.profile)\n\n    return (<React.Fragment>\n\t\t{profile?<><Profile data={profile} repoData={repos} /><hr/></>:null}\n\t\t{Array.isArray(repos)&&repos.length?<Repositories data={repos} />:null}\n    </React.Fragment>);\n  \n};","import { createSlice } from '@reduxjs/toolkit';\nimport Axios from 'axios';\nimport {toast} from 'react-toastify'\n\nexport const counterSlice = createSlice({\n  name: 'visualizer',\n  initialState: {\n    loading: false,\n    username: '',\n    repo: [],\n    profile: null,\n  },\n  reducers: {\n    toggleLoading: state => {\n      state.loading = !state.loading;\n    },\n    clearValues: state => {\n      state.profile = null;\n      state.repo = []\n    },\n    setusername: (state, action) => {\n      state.username = action.payload;\n    },\n    setrepo: (state, action) => {\n      state.repo = action.payload;\n    },\n    setprofile: (state, action) => {\n      state.profile = action.payload;\n    },\n  },\n});\n\nexport const { toggleLoading, setusername, setrepo, setprofile, clearValues } = counterSlice.actions;\n\nexport const getAndSetUsername = username => dispatch => {\n    dispatch(toggleLoading())\n    // TODO maximum of 100 repos are PublicKeyCredential, needs pagination\n    const repoUrl = `https://api.github.com/users/${username}/repos?sort=created&per_page=100`\n    const profileUrl = `https://api.github.com/users/${username}`\n\n    const requestOne = Axios.get(repoUrl);\n    const requestTwo = Axios.get(profileUrl);\n\n    Axios.all([requestOne, requestTwo]).then(Axios.spread((...responses) => {\n        const responseOne = responses[0]\n        const responseTwo = responses[1]\n        dispatch(setrepo(responseOne.data))\n        dispatch(setprofile(responseTwo.data))\n      })).catch(error => {\n        const status = error.response.status\n        if(status === 404) {\n            toast.error(`No user found with id ${username}`)\n        }else{\n            toast.error(\"Something went wrong\")\n        }\n        console.log(error);\n      }).finally(()=>{\n        dispatch(toggleLoading())\n    })\n};\n\nexport default counterSlice.reducer;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport { InputGroup, FormControl, Container, Button, Spinner, Row } from 'react-bootstrap'\n\nimport ProfileAndRepos from './ProfileAndRepos';\nimport { getAndSetUsername, clearValues } from './visualizerSlice';\n\nimport classes from './Visualizer.module.css'\n\nfunction UsernameForm(props) {\n    const history = useHistory();\n    const dispatch = useDispatch()\n    const loading = useSelector(state => state.visualizer.loading)\n    const [username, setUsername] = useState(props.match.params.username || '')\n    const handleChange = event => setUsername(event.target.value)\n    const handleSubmit = (username) => {\n        history.push(`/github-visualizer/${username}`)\n    }\n    useEffect(() => {\n        if (!username) dispatch(clearValues())\n    }, [username, dispatch])\n    let buttonContent = null\n    if (loading) {\n        buttonContent = (<Button variant=\"primary\" disabled>\n            <Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                            Loading...\n        </Button>)\n    } else {\n        buttonContent = (<Button variant=\"primary\" type=\"submit\" onClick={() => handleSubmit(username)} >\n            Submit\n        </Button>)\n    }\n\n    return (\n        <form onSubmit={e => e.preventDefault()} >\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                    <InputGroup.Text>https://github.com/</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                    placeholder=\"username\"\n                    value={username}\n                    onChange={handleChange}\n                    aria-label=\"GitHub username\"\n                />\n                <InputGroup.Append>\n                    {buttonContent}\n                </InputGroup.Append>\n            </InputGroup>\n        </form>\n    )\n}\n\n\n\nexport default function (props) {\n    const dispatch = useDispatch()\n    const loading = useSelector(state => state.visualizer.loading)\n    useEffect(() => {\n        if (props.match.params.username) dispatch(getAndSetUsername(props.match.params.username))\n    }, [props.match.params.username, dispatch])\n\n    let content = null\n    if (loading) content = <div className={classes.spinner__container} ><Spinner animation=\"border\" variant=\"primary\" /></div>\n    else content = <ProfileAndRepos />\n    return <Container fluid>\n            <Row><h3 className={classes.heading} > GitHub Profile Visualizer </h3></Row>\n            <UsernameForm {...props} />\n            {content}\n        </Container>\n}","import React, {Suspense} from 'react';\r\nimport {Route, Switch, BrowserRouter, Redirect} from 'react-router-dom';\r\n\r\n\r\nimport Visualizer from './features/visualizer/Visualizer'\r\nimport { toast } from 'react-toastify';\r\n\r\nimport './App.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ntoast.configure({\r\n  autoClose: 2500,\r\n  position: toast.POSITION.TOP_RIGHT,\r\n}); \r\n\r\nconst NotFound = () => <h1>The page you are looking does not exist</h1>\r\n\r\nfunction Routes() {\r\n  return(\r\n    <Suspense fallback=\"Loading\" >\r\n      <Switch>\r\n        <Route exact path={['/github-visualizer/', '/github-visualizer/:username']} component={Visualizer} />\r\n        <Route path='/' exact > <Redirect to='/github-visualizer' /> </Route>\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n       <Routes />\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport visualizerReducer from '../features/visualizer/visualizerSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    visualizer: visualizerReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Visualizer_heading__1F8VM\",\"spinner__container\":\"Visualizer_spinner__container__33OkT\"};"],"sourceRoot":""}